#ifndef ILCPVECDigitizer_H
#define ILCPVECDigitizer_H
/* 2012-2013 Infrastructure for Large Collider Experiment.       *
 * All rights reserved.                                                   *
 * See cxx source for full Copyright notice                               */

/* $Id: IlcPVECDigitizer.h 54863 2012-02-28 12:10:29Z hristov $ */


//_________________________________________________________________________
//  Task Class for making SDigits in PVEC      
// Class performs digitization of Summable digits (in the PVEC case this is just
// sum of contributions of all primary particles into given cell). 
// In addition it performs mixing of summable digits from different events.
//                  
//*-- Author: Dmitri Peressounko(SUBATECH & KI)


// --- ROOT system ---
//#include "TObjString.h"
class TArrayI ;
class TClonesArray ; 

// --- Standard library ---

// --- IlcRoot header files ---
#include "IlcDigitizer.h"
#include "IlcConfig.h"
#include "IlcPVECPulseGenerator.h"
class IlcDigitizationInput ;
class IlcPVECCalibData ; 

class IlcPVECDigitizer: public IlcDigitizer {

public:
  IlcPVECDigitizer() ;          // ctor
  IlcPVECDigitizer(TString ilcrunFileNameFile, TString eventFolderName = IlcConfig::GetDefaultEventFolderName()) ; 
  IlcPVECDigitizer(IlcDigitizationInput * digInput) ;
  virtual ~IlcPVECDigitizer() ;       

  void    Digitize(Int_t event) ;            // Make Digits from SDigits 
  void    Digitize(Option_t *option);                  // Supervising method

  void   SetEventRange(Int_t first=0, Int_t last=-1) {fFirstEvent=first; fLastEvent=last; }

  //General
  Int_t   GetDigitsInRun()  const { return fDigitsInRun ;}  

  void    Print(const Option_t * = "")const ;
 
private:
  IlcPVECDigitizer(const IlcPVECDigitizer & dtizer) ;
  IlcPVECDigitizer & operator = (const IlcPVECDigitizer & /*rvalue*/);

  virtual Bool_t Init() ; 
  void    InitParameters() ; 
  void    PrintDigits(Option_t * option) ;
  void    Unload() ; 
  void    WriteDigits() ;                     // Writes Digits for the current event
  Float_t TimeOfNoise(void) const;            // Calculate time signal generated by noise

  Float_t TimeResolution(Float_t energy) ;    //TOF resolution

  //Calculate the time of crossing of the threshold by front edge
  //  Float_t FrontEdgeTime(TClonesArray * ticks) const ; 
  //Calculate digitized signal with gived ADC parameters
  Float_t Calibrate(Float_t amp, Int_t absId) ;
  Float_t CalibrateT(Float_t time, Int_t absId) ;
  void    Decalibrate(IlcPVECDigit * digit);

private:

  Bool_t  fDefaultInit;             //! Says if the task was created by defaut ctor (only parameters are initialized)
  Int_t   fDigitsInRun ;            //! Total number of digits in one run
  Bool_t  fInit ;                   //! To avoid overwriting existing files

  Int_t   fInput ;                  // Number of files to merge
  TString * fInputFileNames ;       //[fInput] List of file names to merge 
  TString * fEventNames ;           //[fInput] List of event names to merge

  Int_t   fEmcCrystals ;            // Number of EMC crystalls in the given geometry

  TString fEventFolderName;         // skowron: name of EFN to read data from in stand alone mode
  Int_t   fFirstEvent;              // first event to process
  Int_t   fLastEvent;               // last  event to process 
  IlcPVECCalibData* fcdb;           //! Calibration parameters DB

  Int_t fEventCounter ;             //! counts the events processed

  IlcPVECPulseGenerator *fPulse;    //! Pulse shape generator
  Int_t *fADCValuesLG;              //! Array of low-gain ALTRO samples
  Int_t *fADCValuesHG;              //! Array of high-gain ALTRO samples
  
  ClassDef(IlcPVECDigitizer,5)  // description 

};


#endif // IlcPVECDigitizer_H
