#ifndef ILCTARGETSIMULATIONSPD_H
#define ILCTARGETSIMULATIONSPD_H

/* Copyright(c) 2005-2006, ILC Project Experiment, All rights reserved.   *
 * See cxx source for full Copyright notice                               */

////////////////////////////////////////////////////////////
// Simulation class for SPD                               //
////////////////////////////////////////////////////////////

#include "TObjArray.h"
#include "IlcTARGETsimulation.h"
#include "IlcTARGETParam.h"
#include "IlcTARGETCalibrationSPD.h"
#include "IlcTARGETsegmentationSPD.h"

class TH1F;
class IlcTARGETmodule;
class IlcTARGETresponseSPD;

//-------------------------------------------------------------------

class IlcTARGETsimulationSPD : public IlcTARGETsimulation {
 public:
    IlcTARGETsimulationSPD();
    //    IlcTARGETsimulationSPD(IlcTARGETsegmentation *seg,IlcTARGETCalibration *res);
    IlcTARGETsimulationSPD(IlcTARGETDetTypeSim *dettyp);
    virtual ~IlcTARGETsimulationSPD();
    // copy constructor
    IlcTARGETsimulationSPD(const IlcTARGETsimulationSPD &source); 
     // ass. operator
    IlcTARGETsimulationSPD& operator=(const IlcTARGETsimulationSPD &s);
    virtual IlcTARGETsimulation& operator=(const IlcTARGETsimulation &source);
    // Initilizes the variables
    void Init();
    // Get pointers (calObj[]) to the calibration objects
    // ??? Is there a better way to do this ???
    void GetCalibrationObjects(Int_t RunNr);

    // General User calling routines
    // Initilize simulation for a specific event and module
    void InitSimulationModule(Int_t module, Int_t event);
    // Finish and write S Digitization
    void FinishSDigitiseModule();
    // From hits to Digits, without creating SDigits
    void DigitiseModule(IlcTARGETmodule *mod,Int_t,Int_t);

    // More or less Internal Routines
    // Create S Digits from specific module
    void SDigitiseModule(IlcTARGETmodule *mod, Int_t mask, Int_t event);
    // Write S Digits to the tree of SDigits.
    void WriteSDigits(Int_t lay);
    // fill pList from hits, charge sharing, diffusion, coupling
    void HitToSDigit(IlcTARGETmodule *mod);
    // fill pList from hits, charge sharing, diffusion, coupling  (faster method optimized by Bjorne)
    void HitToSDigitFast(IlcTARGETmodule *mod);
    // Removes dead pixels from pList
    void RemoveDeadPixels(IlcTARGETmodule *mod);
    // Take pList of signals and apply noise... create Digis
    void FrompListToDigits();
    //
    void CreateHistograms(Int_t lay);
    void FillHistograms(Int_t ix,Int_t iz,Double_t v=1.0);
    void ResetHistograms(Int_t lay);
    TH1F* GetHistogram(Int_t i){return (TH1F*)(fHis->UncheckedAt(i));}// get histogram
    TObjArray*  GetHistArray() {return fHis;}// get hist array
    TString& GetHistName(){return fSPDname;}
    void SetHistName(TString &n){fSPDname = n;}
    //
    // For backwards compatibility
    void SDigitsToDigits(){ FinishSDigitiseModule();};
    void HitToDigit(IlcTARGETmodule *mod){
        // Standard interface to DigitiseModule  Inputs: IlcTARGETmodule *mod  Pointer to this module
        DigitiseModule(mod,GetModuleNumber(),0);};

 private:
    void SpreadCharge(Int_t lay,Double_t x0,Double_t z0,Int_t ix0,Int_t iz0,
		      Double_t el,Double_t sig,Int_t t,Int_t hi);
    void SpreadChargeAsym(Int_t lay,Double_t x0,Double_t z0,Int_t ix0,Int_t iz0,
                      Double_t el,Double_t sigx,Double_t sigz,Int_t t,Int_t hi);
    void UpdateMapSignal(Int_t lay,Int_t ix,Int_t iz,Int_t trk,Int_t ht,Double_t signal){
        //  This function adds a signal to the pList from the pList class
        //  Inputs: iz column number  ix row number  trk track number  ht hit number  signal signal strength
        GetMap2(lay)->AddSignal(iz,ix,trk,ht,GetModuleNumber(),signal);};
    void UpdateMapNoise(Int_t lay,Int_t ix,Int_t iz,Float_t noise){
        //  This function adds noise to data in the MapA2 as well as the pList
        //  Inputs:  iz column number  ix row number  noise electronic noise generated by FrompListToDigits
        GetMap2(lay)->AddNoise(iz,ix,GetModuleNumber(),noise);}
    // Get a pointer to the segmentation object
    virtual IlcTARGETsegmentation* GetSegmentationModel(Int_t /*dt*/){return fDetType->GetSegmentationModel(0);}
    virtual IlcTARGETsegmentation2* GetSegmentationModel2(Int_t /*dt*/){return fDetType->GetSegmentationModel2(0);}

    // set pointer to segmentation objec
    virtual void SetSegmentationModel(Int_t /*dt*/, IlcTARGETsegmentation *seg){fDetType->SetSegmentationModel(0,seg);}
    virtual void SetSegmentationModel2(Int_t /*dt*/, IlcTARGETsegmentation2 *seg){fDetType->SetSegmentationModel2(0,seg);}

    // Bari-Salerno Coupling parameters
    // "New" coupling routine  Tiziano Virgili
    void SetCoupling(Int_t lay,Int_t col,Int_t row,Int_t ntrack,Int_t idhit);
    // "Old" coupling routine  Rocco Caliandro
    void SetCouplingOld(Int_t lay,Int_t col, Int_t row,Int_t ntrack,Int_t idhit);
    // Getters for data kept in fSegmentation and fResponse.
    // Returns the Threshold in electrons
    Double_t GetThreshold(){
      Double_t th,sig;IlcTARGETCalibrationSPD* res=(IlcTARGETCalibrationSPD*)GetCalibrationModel(GetModuleNumber()); 
	res->Thresholds(th,sig);return th;};
    // Returns the couplings Columb and Row.
    void GetCouplings(Double_t &cc,Double_t &cr){
      //IlcTARGETCalibrationSPD* res = (IlcTARGETCalibrationSPD*)GetCalibrationModel(GetModuleNumber());
      //res->GetCouplingParam(cc,cr);
cout <<"fParam: modules SPD: "<<fParam->GetNmodulesSPD()<<endl;
cout <<"fParam: modules SSD: "<<fParam->GetNmodulesSSD()<<endl;

      cc=fParam->GetCouplCol();
     // cr=0.047; 
     cr=fParam->GetCouplRow(); //daniele

};
    // Returns the number of pixels in x
    Int_t GetNPixelsX(Int_t lay){return GetSegmentationModel2(0)->Npx(lay);};
    // Returns the number of pixels in z
    Int_t GetNPixelsZ(Int_t lay){return GetSegmentationModel2(0)->Npz(lay);};
    TObjArray    *fHis;          //! just in case for histogramming
    TString       fSPDname;      //! Histogram name
    Int_t         fCoupling;     // Sets the coupling to be used.

                                 // ==1 use SetCoupling, ==2 use SetCouplingOld
    IlcTARGETCalibrationSPD* fCalObj[10000]; // Calibration objects (per module)
    ClassDef(IlcTARGETsimulationSPD,2)  // Simulation of SPD clusters
};
#endif 
